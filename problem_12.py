#!/usr/bin/python

'''
Project Euler
Problem 12
http://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
'''

import sys


def num_divisors(num):
    '''
    Find the number of divisors for a given number

    Args: An integer

    Returns: An integer
    '''
    if num == 1:
        return 1
    count = 2
    max_divisor = int(num ** 0.5) + 1
    for divisor in range(2, max_divisor, 1):
        if not num % divisor:
            count += 2
    return count


def main(desired_divisors):
    '''
    Find the smallest natural number to have, at least, a given number of
    divisors.

    Args: an integer
    '''
    num = 1
    incrementor = 2
    while num_divisors(num) < desired_divisors:
        num += incrementor
        incrementor += 1
    print num

if __name__ == '__main__':
    main(int(sys.argv[1]))
